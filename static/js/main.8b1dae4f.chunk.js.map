{"version":3,"sources":["logo.svg","lib/RosGraph.js","Message.js","ErrorBoundary.js","Widget.js","Publisher.js","Subscriber.js","ButtonPanel.js","lib/RosGraphView.js","NodeGraph.js","styles/treebeard-theme.js","lib/NodeTree.js","NodeList.js","JViz.js","App.js","index.js"],"names":["module","exports","RosGraph","nodes","topics","services","actions","getRelations","path","type","result","_","find","in","subscribers","out","publishers","this","getNodes","ros","Promise","resolve","reject","list","newNodes","map","node","getNodeDetails","subscribing","publishing","clients","message","console","error","all","p","catch","then","values","filteredValues","filter","n","undefined","table","sortBy","log","GetRosGraph","getTopics","topicList","topicName","i","forEach","includes","push","getTopicRelation","messageType","types","sortedTopics","primitivesFloat","primitivesInteger","primitives","Message","MessageField","fieldIndex","messageIndex","name","className","props","messageDetails","fieldtypes","value","onChange","event","target","parseFloat","parseInt","set","updateState","MessageFieldArray","x","field","fieldnames","newPath","concat","MessageHeader","MessageType","style","marginLeft","marginRight","auto","React","ErrorBoundary","state","hasError","info","children","Widget","minimised","formatName","length","slice","maxlen","effect","place","data-tip","onClick","setState","onRequestClose","Publisher","decodeTypeDefsRec","details","repeat","examples","intervalId","frequency","interval","display","publisher","ROSLIB","Topic","topic","componentWillUnmount","clearInterval","publish","messageObj","time","Date","now","header","stamp","secs","nsecs","toggleRepeat","index","setInterval","theType","hints","typeDefDict","arrayLen","fieldarraylen","fieldName","fieldType","fieldExample","indexOf","sub","j","toString","subResult","flexDirection","flex","padding","overflowY","YamlMessage","language","useInlineStyles","YAML","stringify","Subscriber","subscriber","autoscroll","messageCount","componentDidMount","subscribe","unsubscribe","prevState","CreateSubscriberButton","id","UUID","addWidget","key","removeWidget","CreatePublisherButton","getMessageDetails","HideItemButton","hideItem","ButtonPanel","buttons","DEBUG_NAMES","RosGraphView","hidden","unhideItems","getHidden","hideDebug","searchFor","search","filterFor","toggled","toggledList","split","reduce","subId","join","toggledIndex","splice","treeNode","rosGraph","active","findNode","relations","newToggled","updateToggled","relation","NodeGraph","options","getOptions","lonely","highlight","hide","getGroupTag","view","group","createGraph","edges","graphId","from","to","label","shape","graph","events","click","setNodeActive","height","layout","hierarchical","direction","enabled","sortMethod","color","smooth","background","border","hover","font","interaction","groups","default","input","output","autoResize","tree","base","listStyle","margin","fontSize","position","paddingLeft","link","cursor","activeLink","toggle","verticalAlign","width","wrapper","top","left","arrow","fill","strokeWidth","connector","borderLeft","borderBottom","title","lineHeight","subtree","loading","addDecorator","Header","GetNodeTree","data","insert","pathIndex","subpath","leaf","decorators","findIndex","o","stem","NodeList","NodeTree","onToggle","styles","JViz","autoExpand","layouts","widgets","updateRosGraph","element","item","handleSearch","handleSearchKey","onKeyDown","placeholder","toggleDebug","widget","App","connected","url","handleChange","handleConnect","Ros","on","e","src","logo","alt","float","version","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8b1dae4f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// @flow\nimport _ from 'lodash';\n\ntype Id = string\n\ntype PrimitiveType =\n  | \"action\"\n  | \"node\"\n  | \"service\"\n  | \"topic\"\n\ntype Node = {\n  actions: Array<Id>,\n  path: string,\n  services: {\n    clients: Array<Id>,\n  },\n  topics: {\n    publishers: Array<Id>,\n    subscribers: Array<Id>,\n  },\n  type: \"node\",\n}\n\ntype Topic = {\n  messageType: string,\n  path: string,\n  publishers: Array<Id>,\n  subscribers: Array<Id>,\n  type: \"topic\",\n}\n\ntype Service = {\n  path: string,\n  type: \"service\",\n}\n\ntype Action = {\n  path: string,\n  type: \"action\",\n}\n\ntype Primitive = Node | Topic | Service | Action\n\ntype Relations = {\n  in: Array<Id>,\n  out: Array<Id>,\n  type: PrimitiveType\n}\n\nclass RosGraph {\n  nodes: Array<Node>\n  topics: Array<Topic>\n  services: Array<Service>\n  actions: Array<Action>\n\n  constructor(nodes: Array<Node> = [], topics: Array<Topic> = [], services: Array<Service> = [], actions: Array<Action> = []) {\n    this.nodes = nodes\n    this.topics = topics\n    this.services = services\n    this.actions = actions\n  }\n\n  getRelations = (path: string, type: PrimitiveType): ?Relations => {\n    switch (type) {\n      case \"node\":\n        {\n          const result: ?Node = _.find(this.nodes, {path: path})\n          if (result) {\n            return {\n                in: result.topics.subscribers,\n                out: result.topics.publishers,\n                type: \"topic\"\n              }\n            }\n        }\n        break\n      case \"topic\":\n        {\n          const result = _.find(this.topics, {path: path})\n          if (result)\n            return {\n              in: result.publishers,\n              out: result.subscribers,\n              type: \"node\"\n            }\n        }\n        break\n      default:\n    }\n  }\n\n  findNode(path: string, type: PrimitiveType): ?Node | Topic {\n    switch (type) {\n      case \"node\":\n          return _.find(this.nodes, {\n            path: path\n          })\n      case \"topic\":\n          return _.find(this.topics, {\n            path: path\n          })\n      default:\n    }\n  }\n}\n\nfunction getNodeDetails(ros: Object, node: string): Promise<Node> {\n  return new Promise((resolve, reject) => {\n\n    ros.getNodeDetails(node, (subscribing: Array<Id>, publishing: Array<Id>, services: Array<Id>) => {\n      let detailedNode: Node = {\n        path: node,\n        actions: [],\n        topics: {\n          publishers: publishing,\n          subscribers: subscribing,\n        },\n        services: {\n          clients: services\n        },\n        type: \"node\",\n      }\n\n      resolve(detailedNode)\n\n    // Failed callback\n  }, (message: string) => {\n      console.error(\"Failed to get node details\", node, message)\n      reject(message)\n    })\n  })\n}\n\nfunction getNodes(ros: Object): Promise<Array<Node>> {\n  return new Promise((resolve, reject) => {\n    ros.getNodes((list) => {\n      let newNodes = list.map((node) => getNodeDetails(ros, node))\n\n      Promise.all(newNodes.map(p => p.catch(() => undefined)))\n        .then(values => {\n          let filteredValues = values.filter((n) => n !== undefined)\n          console.table(filteredValues)\n          resolve(_.sortBy(filteredValues, 'path'))\n        })\n\n    }, (message) => {\n      console.log('RosGraph updateRosGraph failed to getNodes: ' + message);\n      return reject('RosGraph updateRosGraph failed to getNodes: ' + message);\n    });\n  })\n}\n\nfunction getTopicRelation(nodes: Array<Node>, topicName: string): {publishers: Array<Id>, subscribers: Array<Id>} {\n  let publishers = []\n  let subscribers = []\n  nodes.forEach((node) => {\n    if (node.topics && node.topics.publishers && node.topics.publishers.includes(topicName)) publishers.push(node.path)\n    if (node.topics && node.topics.subscribers && node.topics.subscribers.includes(topicName)) subscribers.push(node.path)\n  })\n  return {\n    publishers: publishers,\n    subscribers: subscribers\n  }\n}\n\nfunction getTopics(ros: Object, nodes: Array<Node>): Promise<{topics: Array<Topic>, nodes: Array<Node>}> {\n  return new Promise((resolve, reject) => {\n    ros.getTopics((topics) => {\n      const topicList: Array<Topic> = topics.topics.map((topicName, i) => {\n        const node = getTopicRelation(nodes, topicName)\n        return {\n          path: topicName,\n          messageType: topics.types[i],\n          publishers: node.publishers,\n          subscribers: node.subscribers,\n          type: \"topic\",\n        }\n      });\n      const sortedTopics: Array<Topic> = _.sortBy(topicList, 'path');\n      resolve({\n        topics: sortedTopics,\n        nodes: nodes\n      });\n\n    // Failed callback\n    }, (message) => {\n      console.error(\"Failed to get topic\", message)\n    });\n  })\n}\n\nfunction GetRosGraph(ros: RosGraph): Promise<RosGraph> {\n  return new Promise((resolve, reject) => {\n    return getNodes(ros)\n      .then((nodes) => getTopics(ros, nodes))\n      .then(({topics,nodes}) => resolve(new RosGraph(nodes, topics)))\n  })\n}\n\nfunction filterGraph(rosGraph: RosGraph, filter: string): RosGraph {\n  const nodes = _.filter(rosGraph.nodes, (p) => {return p.path.includes(filter)})\n  const topics = _.filter(rosGraph.topics, (p) => {return p.path.includes(filter)})\n  const services = _.filter(rosGraph.services, (p) => {return p.path.includes(filter)})\n  const actions = _.filter(rosGraph.actions, (p) => {return p.path.includes(filter)})\n  return new RosGraph(nodes, topics, services, actions)\n}\n\nexport {RosGraph, GetRosGraph, filterGraph}\nexport type {Node, Topic, Service, Action, Relations, Id, Primitive, PrimitiveType}\nexport default {RosGraph, GetRosGraph}\n","// @flow\nimport * as React from 'react';\nimport _ from 'lodash';\n\ntype Path = Array<string>\ntype Index = number\n\ntype RosMessage = {\n  header?: {\n    stamp: {\n      secs: number,\n      nsecs: number,\n    }\n  }\n}\n\ntype Details = {\n  examples: Array<mixed>,\n  fieldarraylen: Array<number>,\n  fieldnames: Array<string>,\n  fieldtypes: Array<string>,\n  type: string,\n}\n\ntype ReplaceMe = {\n  fieldIndex: Index,\n  messageIndex: Index,\n  name: string,\n  path: Path,\n  type: string,\n}\n\ntype Props = {\n  auto: boolean,\n  message: RosMessage,\n  messageDetails: Array<Details>,\n  updateState: ({message?: RosMessage, values?: Array<Array<mixed>>, auto?: boolean}) => void,\n  values: Array<Array<mixed>>,\n}\n\nconst primitivesFloat = [\n  \"float32\",\n  \"float64\",\n];\nconst primitivesInteger = [\n  \"int8\",\n  \"uint8\",\n  \"int16\",\n  \"uint16\",\n  \"int32\",\n  \"uint32\",\n  \"int64\",\n  \"uint64\",\n];\nconst primitives = [\n  \"byte\",\n  \"bool\",\n  \"string\",\n];\n\nclass Message extends React.Component<Props> {\n  MessageField = ({fieldIndex, messageIndex, name, path, type}: ReplaceMe): React.Element<any> => {\n    return (\n      <div className=\"MessageLine\">\n        <span className=\"MessageLabel\">{name} ({this.props.messageDetails[messageIndex].fieldtypes[fieldIndex]}):</span>\n        <input className=\"MessageTypeInput\"\n          type=\"text\"\n          value={this.props.values[messageIndex][fieldIndex]}\n          onChange={\n            (event) => {\n              // Update message\n              const message = this.props.message;\n              var value = null\n\n              if (primitives.includes(type)) {\n                value = event.target.value\n              } else if (primitivesFloat.includes(type)) {\n                value = parseFloat(event.target.value)\n              } else if (primitivesInteger.includes(type)) {\n                value = parseInt(event.target.value, 10)\n              } else {\n                console.log(\"I was not expecting this message type\", type)\n                return\n              }\n\n              _.set(message, path, value);\n\n              const values = this.props.values;\n              values[messageIndex][fieldIndex] = value;\n\n              this.props.updateState({\n                message: message,\n                values: values,\n              });\n            }\n          }/>\n        </div>\n      )\n    }\n\n    MessageFieldArray = ({messageIndex, path}: {messageIndex: Index, path: Path}): React.Element<any> => {\n      const message = this.props.messageDetails[messageIndex];\n\n      const x: Array<React.Element<any>> = message.fieldtypes.map((field, i) => {\n        const name = message.fieldnames[i];\n        const newPath = path.concat(name);\n        if (primitives.includes(field) || primitivesFloat.includes(field) || primitivesInteger.includes(field)) {\n          return this.MessageField({name: name, fieldIndex: i, messageIndex: messageIndex, path: newPath, type: field});\n        } else if (field === \"std_msgs/Header\") {\n          return this.MessageHeader({name: name, messageIndex: messageIndex + 1, path: newPath});\n        } else {\n          return this.MessageType({name: name, messageIndex: messageIndex + 1, path: newPath});\n        }\n      })\n\n      return (\n        <div style={{marginLeft: 10}}>{x}</div>\n      )\n    }\n\n    MessageType = ({messageIndex, name, path}: {messageIndex: Index, name: string, path: Path}): React.Element<any> => {\n      return (\n        <div>\n          <div className=\"MessageLabel\" style={{marginRight: 5}}>{name}:</div>\n          {this.MessageFieldArray({messageIndex: messageIndex, path: path})}\n        </div>\n      );\n    }\n\n    MessageHeader = ({messageIndex, name, path}: {messageIndex: Index, name: string, path: Path}): React.Element<any> => {\n      return (\n        <div>\n          <div className=\"MessageLine\">\n            <span className=\"MessageLabel\">{name}:</span>\n            <select className=\"MessageTypeInput\" value={this.props.auto} onChange={(event: {target: {value: boolean}}) => this.props.updateState({auto: event.target.value === \"true\"})}>\n              <option value={true}>auto</option>\n              <option value={false}>manual</option>\n            </select>\n          </div>\n          {this.props.auto || this.MessageFieldArray({messageIndex: messageIndex, path: path})}\n        </div>\n      )\n    }\n\n    render() {\n      return this.MessageFieldArray({messageIndex: 0, path: []});\n    }\n}\n\nexport default Message;\n","import * as React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    // You can also log the error to an error reporting service\n    // logErrorToMyService(error, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","// @flow\nimport * as React from 'react'\nimport ReactTooltip from 'react-tooltip';\nimport './styles/Widget.css';\nimport ErrorBoundary from './ErrorBoundary';\n\ntype Props = {\n  name: string,\n  onRequestClose?: () => void,\n  children: React.Element<any>,\n  state?: string\n}\n\ntype State = {\n  minimised: bool,\n}\n\nclass Widget extends React.Component<Props, State> {\n  state = {\n    minimised: false\n  }\n\n  formatName = (name: string) => {\n    const maxlen = 25\n    if (name.length > maxlen) return name.slice(0, maxlen-3) + \"...\"\n    return name\n  }\n\n  render() {\n    return (\n    <div className={'Widget'} >\n      <ReactTooltip effect=\"solid\" place=\"left\" type=\"info\"/>\n      <div className={'Header'} data-tip={this.props.name} onClick={() => this.setState({minimised: !this.state.minimised})}>\n        { this.props.state ? <div className={\"State\" + this.props.state}></div> : false}\n        <div className={'Name'}>{this.formatName(this.props.name)}</div>\n        {this.props.onRequestClose ? <div className={'Close'} onClick={this.props.onRequestClose}>x</div> : false}\n      </div>\n      <ErrorBoundary>\n        {this.state.minimised ? false : <div className={'Main'}><div className={'Content'}>{this.props.children}</div></div>}\n      </ErrorBoundary>\n    </div>\n    );\n  }\n}\n\nexport default Widget;\n","// @flow\nimport * as React from 'react';\nimport ROSLIB from 'roslib';\nimport Message from './Message'\nimport Widget from './Widget';\n\ntype RosMessage = {\n  header?: {\n    stamp: {\n      secs: number,\n      nsecs: number,\n    }\n  }\n}\n\ntype Details = {\n  examples: Array<mixed>,\n  fieldarraylen: Array<number>,\n  fieldnames: Array<string>,\n  fieldtypes: Array<string>,\n  type: string,\n}\n\ntype Props = {\n  details: Array<Details>,\n  onRequestClose?: () => void,\n  ros: ROSLIB.Ros,\n  topic: string,\n  type: string,\n}\n\ntype State = {\n  auto: boolean,\n  message: RosMessage,\n  repeat: number,\n  values: Array<Array<mixed>>,\n}\n\nclass Publisher extends React.Component<Props, State> {\n  state = {\n    auto: false,\n    message: this.decodeTypeDefsRec(this.props.details[0], this.props.details),\n    repeat: 0,\n    values: this.props.details.map((message) => message.examples),\n  }\n\n  intervalId: ?IntervalID = null\n\n  frequency = [\n    {interval: 0, display: \"Single\"},\n    {interval: 10000, display: \"0.1 Hz\"},\n    {interval: 5000, display: \"0.5 Hz\"},\n    {interval: 1000, display: \"1 Hz\"},\n    {interval: 200, display: \"5 Hz\"},\n    {interval: 100, display: \"10 Hz\"}]\n\n  publisher = new ROSLIB.Topic({\n    ros : this.props.ros,\n    name : this.props.topic,\n    messageType : this.props.type,\n  })\n\n  // calls itself recursively to resolve type definition using hints.\n  decodeTypeDefsRec(theType: Details, hints: Array<Details>) {\n    var typeDefDict = {};\n    for (var i = 0; i < theType.fieldnames.length; i++) {\n      const arrayLen: number = theType.fieldarraylen[i];\n      const fieldName: string = theType.fieldnames[i];\n      const fieldType: string = theType.fieldtypes[i];\n      var fieldExample: any = theType.examples[i];\n      if (fieldType.indexOf('/') === -1) { // check the fieldType includes '/' or not\n        if (arrayLen === -1) {\n          if (fieldType === \"float64\") {\n            console.log(\"fieldExample\", fieldExample, parseFloat(fieldExample))\n            fieldExample = parseFloat(fieldExample);\n\n          }\n          typeDefDict[fieldName] = fieldExample;\n        }\n        else {\n          typeDefDict[fieldName] = [fieldType];\n        }\n      }\n      else {\n        // lookup the name\n        var sub = false;\n        for (var j = 0; j < hints.length; j++) {\n          if (hints[j].type.toString() === fieldType.toString()) {\n            sub = hints[j];\n            break;\n          }\n        }\n        if (sub) {\n          const subResult = this.decodeTypeDefsRec(sub, hints);\n          if (arrayLen === -1) {\n            typeDefDict[fieldName] = subResult;\n          }\n          else {\n            typeDefDict[fieldName] = [subResult];\n          }\n        }\n        else {\n          console.log('error', 'Cannot find ' + fieldType + ' in decodeTypeDefs');\n        }\n      }\n    }\n    return typeDefDict;\n  }\n\n  componentWillUnmount = () => {\n    if (this.state.repeat && this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n    this.setState({repeat: 0})\n  }\n\n  publish = () => {\n    if (!this.state.message) return\n    var messageObj: RosMessage = this.state.message;\n\n    if (this.state.auto) {\n      const time = Date.now()\n      if (messageObj.header) messageObj.header.stamp = {\n          secs: time / 1000,\n          nsecs: time % 1000,\n      }\n    }\n\n    const message = new ROSLIB.Message(messageObj);\n\n    this.publisher.publish(message);\n  }\n\n  toggleRepeat = () => {\n    const index = (this.state.repeat + 1) % this.frequency.length\n    if (this.intervalId) clearInterval(this.intervalId)\n\n    if (index !== 0) {\n      this.intervalId = setInterval(this.publish, this.frequency[index].interval); // publish at 1Hz\n    }\n\n    this.setState({\n      repeat: index,\n    })\n  }\n\n  render() {\n    return (\n      <Widget name={\"Pub: \" + this.props.topic} onRequestClose={this.props.onRequestClose}>\n        <div className=\"Publisher\">\n          <div style={{display: \"flex\", flexDirection: \"column\", flex: 1}}>\n            <div style={{padding: 5, overflowY: \"auto\", flex: 1}}>\n              <Message\n                auto={this.state.auto}\n                message={this.state.message}\n                messageDetails={this.props.details}\n                name={this.props.type}\n                updateState={(state) => this.setState(state)}\n                values={this.state.values}\n                />\n            </div>\n            <div className=\"ButtonPanel\">\n              <div className=\"SmallButton ColorOne\" onClick={this.publish}>\n                Publish\n              </div>\n              <div className=\"SmallButton ColorTwo\" onClick={this.toggleRepeat}>\n                {this.frequency[this.state.repeat].display}\n              </div>\n            </div>\n          </div>\n        </div>\n      </Widget>\n    );\n  }\n}\n\nexport default Publisher;\n","// @flow\nimport * as React from 'react';\nimport ROSLIB from 'roslib';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport YAML from 'yamljs';\nimport './styles/dark.css';\nimport Widget from './Widget';\n\ntype Message = {}\n\nfunction YamlMessage(props: {message: Message}) {\n  return (\n    <div className=\"Message\">\n      <SyntaxHighlighter language=\"yaml\" className=\"Message\" useInlineStyles={false}>\n        {YAML.stringify(props.message, 2)}\n      </SyntaxHighlighter>\n    </div>\n  )\n}\n\ntype Props = {\n  onRequestClose?: () => void,\n  ros: ROSLIB.Ros,\n  topic: string,\n  type: string,\n}\n\ntype State = {\n  autoscroll: boolean,\n  index: number,\n  message: Message,\n  messageCount: number,\n}\n\nclass Subscriber extends React.Component<Props, State> {\n  subscriber = new ROSLIB.Topic({\n    ros: this.props.ros,\n    name: this.props.topic,\n    messageType: this.props.type,\n  })\n\n  state = {\n    autoscroll: true,\n    index: -1,\n    message: {},\n    messageCount: 0,\n  }\n\n  componentDidMount = () => {\n    this.subscribe();\n  }\n\n  componentWillUnmount = () => {\n    this.subscriber.unsubscribe();\n  }\n\n  subscribe = () => {\n    this.subscriber.subscribe((message: Message) => {\n      this.setState(prevState => ({\n        message: message,\n        messageCount: prevState.messageCount += 1,\n      }));\n    });\n  }\n\n  render() {\n    let state = \"Red\"\n    if (this.state.messageCount > 0) {\n      if (this.state.message) state = \"Green\"\n      else state = \"Amber\"\n    }\n    return (\n      <Widget name={this.props.topic + \" (\" + this.state.messageCount + \")\"} state={state} onRequestClose={this.props.onRequestClose}>\n        <YamlMessage message={this.state.message} />\n      </Widget>\n    );\n  }\n}\n\nexport default Subscriber;\n","// @flow\nimport * as React from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport ROSLIB from 'roslib';\nimport UUID from 'uuid/v4';\n\nimport * as RosGraph from './lib/RosGraph'\nimport Publisher from './Publisher';\nimport Subscriber from './Subscriber';\n\ntype TopicWidgetProps = {\n  addWidget: (id: string, element: React.Element<any>, name?: string) => void,\n  removeWidget: (id: string) => void,\n  node: RosGraph.Topic,\n  ros: ROSLIB.Ros,\n}\n\nfunction CreateSubscriberButton(props: TopicWidgetProps) {\n  const id = UUID();\n  return (\n    <div>\n      <ReactTooltip effect=\"solid\" place=\"right\" type=\"info\"/>\n      <div data-tip={\"Subscribe to \" + props.node.path} className=\"SmallButton ColorTwo\" onClick={() => {\n        props.addWidget(id, (\n          <Subscriber key={id} ros={props.ros} topic={props.node.path} type={props.node.messageType} onRequestClose={() => props.removeWidget(id)}/>\n        ), props.node.path + \" subscriber\")\n      }}>\n        Subscribe\n      </div>\n    </div>\n  )\n}\n\nfunction CreatePublisherButton(props: TopicWidgetProps) {\n  const id = UUID();\n  return (\n    <div>\n      <ReactTooltip effect=\"solid\" place=\"right\" type=\"info\"/>\n      <div data-tip={\"Publish to \" + props.node.path} className=\"SmallButton ColorThree\" onClick={() => {\n        props.ros.getMessageDetails(props.node.messageType, (details) => {\n          props.addWidget(id, (\n            <Publisher key={id} ros={props.ros} details={details} topic={props.node.path} type={props.node.messageType} onRequestClose={() => props.removeWidget(id)} />\n          ), props.node.path + \" publisher\")\n        }, (message) => {\n          console.log(\"Message details failed\", this.props.type, message)\n        })\n      }}>\n        Publish\n      </div>\n    </div>\n  )\n}\n\ntype HideProps = {\n  path: string,\n  type: string,\n  hideItem: (path: string, type: string) => void,\n}\n\nfunction HideItemButton(props: HideProps) {\n  return (\n    <div>\n      <ReactTooltip effect=\"solid\" place=\"right\" type=\"info\"/>\n      <div data-tip={\"Hide \" + props.path} className=\"SmallButton ColorOne\" onClick={() => {\n        props.hideItem(props.path, props.type)\n      }}>\n        Hide\n      </div>\n    </div>\n  )\n}\n\ntype Props = {\n  addWidget: (id: string, element: React.Element<any>, name?: string) => void,\n  removeWidget: (id: string) => void,\n  hideItem: (path: string, type: string) => void,\n  node: RosGraph.Primitive,\n  ros: ROSLIB.Ros,\n}\n\nfunction ButtonPanel(props: Props) {\n\n  if (!props.node) {\n    return (\n      <div className=\"ButtonPanel\">\n        {props.children}\n      </div>\n    )\n  }\n\n  // TODO: This will be replaced by widget registration somehow\n  var buttons = [];\n  switch (props.node.type) {\n    case \"topic\":\n        const topic: RosGraph.Topic = props.node\n        buttons.push(<CreatePublisherButton key={\"publish_\" + topic.path} ros={props.ros} addWidget={props.addWidget} removeWidget={props.removeWidget} node={topic} />)\n        buttons.push(<CreateSubscriberButton key={\"subscribe_\" + topic.path} ros={props.ros} addWidget={props.addWidget} removeWidget={props.removeWidget} node={topic} />)\n        buttons.push(<HideItemButton key={\"hide_\" + topic.path} hideItem={props.hideItem} path={topic.path} type={props.node.type} />)\n      break;\n    case \"node\":\n      const node: RosGraph.Node = props.node\n      buttons.push(<HideItemButton key={\"hide_\" + node.path} hideItem={props.hideItem} path={node.path} type={props.node.type} />)\n      break;\n    case \"service\":\n\n      break;\n    case \"action\":\n\n      break;\n    default:\n      // console.log(\"No actions for type: \" + props.node.type);\n      return false;\n  }\n\n  return (\n    <div className=\"ButtonPanel\">\n      {buttons}\n    </div>)\n\n}\nexport default ButtonPanel;\n","// @flow\nimport * as RosGraph from './RosGraph'\n\n\n/**\n * This class describes a view of the immutable rosgraph.\n *\n * Most methods in this class will return a copy of itself to help with React\n */\n\nconst DEBUG_NAMES = [\n    '/clock',\n    '/cpu_monitor',\n    '/diag_agg',\n    '/hd_monitor',\n    '/monitor',\n    '/pr2_dashboard',\n    '/rosapi',\n    '/rosout_agg',\n    '/rosout',\n    '/rqt',\n    '/runtime_logger',\n    '/rviz',\n    '/rxloggerlevel',\n    '/statistics',\n    '/record',\n];\n\ntype SimpleNode = {\n  name: string,\n  path: string,\n  type: RosGraph.PrimitiveType,\n}\n\n\nclass RosGraphView {\n  active: ?RosGraph.Primitive\n  type: ?RosGraph.PrimitiveType\n  toggled: Object\n  hidden: Array<RosGraph.Id>\n  hideDebug: boolean\n  relations: ?RosGraph.Relations\n  search: string\n  filter: ?string\n\n  constructor() {\n    this.toggled = {}\n    this.hidden = []\n    this.hideDebug = true\n    this.search = \"\"\n  }\n\n  toggleDebug() {\n    this.hideDebug = !this.hideDebug\n    return this\n  }\n\n  hideItem = (path: string, type: string) => {\n    this.hidden.push(path)\n    return this\n  }\n\n  unhideItems = () => {\n    this.hidden = []\n    return this\n  }\n\n  getHidden = () => {\n    if (this.hideDebug) {\n      return [...this.hidden, ...DEBUG_NAMES]\n    } else {\n      return this.hidden\n    }\n  }\n\n  searchFor = (search: string) => {\n    this.search = search\n    return this\n  }\n\n  filterFor = (filter: string) => {\n    this.filter = filter\n    return this\n  }\n\n  /**\n   * @private\n   */\n  updateToggled(toggledList: Array<RosGraph.Id> = [], path: string, toggled: boolean): Array<RosGraph.Id> {\n\n    // Not in toggled list but meant to be\n    if (toggled) {\n      path.split(\"/\").reduce((path, value) => {\n        const subId = [path, value].join('/')\n        const toggledIndex = toggledList.indexOf(subId)\n        if (toggledIndex === -1) toggledList.push(subId)\n        return subId\n      })\n    } else {\n      // If we aren't meant to be toggled, remove element using splice\n      // TODO: toggle all subtrees\n      const toggledIndex = toggledList.indexOf(path)\n      if (toggledIndex > -1) toggledList.splice(toggledIndex, 1)\n    }\n\n    return toggledList\n  }\n\n  setNodeActive(treeNode: SimpleNode, toggled: boolean, rosGraph: RosGraph.RosGraph) {\n    // set node active\n    this.active = rosGraph.findNode(treeNode.path, treeNode.type)\n    this.type = treeNode.type\n    const relations = rosGraph.getRelations(treeNode.path, treeNode.type)\n\n    // Toggled\n    let newToggled: Object = {}\n    newToggled[treeNode.type] = this.updateToggled(this.toggled[treeNode.type], treeNode.path, toggled)\n    if (relations) newToggled[relations.type] = [...relations.in, ...relations.out].reduce((toggledList, relation) => this.updateToggled(toggledList, relation, true), [])\n\n    this.relations = relations\n    this.toggled = newToggled\n\n    return this\n  }\n}\n\nexport type {SimpleNode}\nexport default RosGraphView;\n","// @flow\nimport * as React from 'react';\nimport Graph from 'react-graph-vis';\n\nimport * as RosGraph from './lib/RosGraph';\nimport RosGraphView from './lib/RosGraphView';\nimport type {SimpleNode} from './lib/RosGraphView';\n\ntype Edge = {\n  from: string,\n  to: string,\n}\n\ntype Node = {\n  id: string,\n  label: string,\n  shape: string,\n  group: string,\n}\n\ntype GraphType = {\n  edges: Array<Edge>,\n  nodes: Array<Node>,\n}\n\ntype Props = {\n  rosGraph: RosGraph.RosGraph,\n  setNodeActive: (treeNode: SimpleNode, toggled: boolean) => void,\n  view: RosGraphView,\n}\n\ntype State = {\n  options: Object,\n  lonely: {\n    highlight: boolean,\n    hide: boolean,\n  }\n}\n\nclass NodeGraph extends React.Component<Props, State> {\n  state = {\n    options: NodeGraph.getOptions(),\n    lonely: {\n      highlight: false,\n      hide: false,\n    }\n  }\n\n  static getOptions() {\n    return {\n      layout: {\n        hierarchical: {\n          direction: 'LR',\n          enabled: false,\n          sortMethod: 'directed'\n        }\n      },\n      edges: {\n        color: \"#d4d3d3\",\n        smooth: true\n      },\n      nodes: {\n        color: {\n          background: 'rgb(98, 118, 131)',\n          border: 'rgb(98, 118, 131)',\n          hover: {\n            background: 'rgb(92, 162, 180)',\n            border: 'rgb(122, 192, 210)'\n          },\n          highlight: {\n            background: 'rgb(122, 192, 210)',\n            border: 'rgb(122, 192, 210)'\n          }\n        },\n        font: {\n          color: 'rgb(223, 223, 223)'\n        }\n      },\n      interaction: {\n        hover: true\n      },\n      groups: {\n        default: {\n          color: {\n            background: 'rgb(98, 118, 131)',\n            border: 'rgb(98, 118, 131)'\n          }\n        },\n        active: {\n          color: {\n            background: 'rgb(122, 192, 210)',\n            border: 'rgb(122, 192, 210)'\n          }\n        },\n        input: {\n          color: {\n            background: 'rgb(177, 147, 18)',\n            border: 'rgb(177, 147, 18)'\n          }\n        },\n        output: {\n          color: {\n            background: 'rgb(128, 177, 18)',\n            border: 'rgb(128, 177, 18)'\n          }\n        },\n        lonely: {\n          color: {\n            background: 'rgb(163, 105, 105)',\n            border: 'rgb(163, 105, 105)'\n          }\n        }\n      },\n      autoResize: true\n    };\n  }\n\n  getGroupTag = (view: RosGraphView, node: RosGraph.Primitive): string => {\n    let group = \"default\"\n\n    // Lonely node\n    if (this.state.lonely.highlight && node.type === \"topic\") {\n        if (node.publishers.length + node.subscribers.length === 1) group = \"lonely\"\n    }\n\n    if (view !== undefined) {\n      if (view.type === node.type && view.active && view.active.path === node.path)\n        group = \"active\"\n      else if (view.relations && view.relations.in.includes(node.path))\n        group = \"input\"\n      else if (view.relations && view.relations.out.includes(node.path))\n        group = \"output\"\n    }\n\n    return group\n  }\n\n  createGraph = (rosGraph: RosGraph.RosGraph, view: RosGraphView = new RosGraphView()): GraphType => {\n    let edges: Array<Edge> = []\n    let nodes: Array<Node> = []\n\n    let hidden = view.getHidden()\n\n      // Deal with nodes\n    rosGraph.nodes.forEach((node) => {\n      if (hidden.includes(node.path))\n        return\n      const graphId: string = \"node_\" + node.path\n      const group: string = this.getGroupTag(view, node)\n\n      // ***** Add edges ******\n      // Assuming topics but links may be services or actions etc.\n      if (node.topics) {\n        let topics = node.topics\n        topics.publishers && topics.publishers.forEach((topic) => {\n          edges.push({ from: graphId, to: \"topic_\" + topic })\n        })\n\n        topics.subscribers && topics.subscribers.forEach((topic) => {\n          edges.push({ from: \"topic_\" + topic, to: graphId })\n        })\n      }\n\n      nodes.push({id: graphId, label: node.path, shape: \"box\", group: group})\n    })\n\n    rosGraph.topics.forEach((node) => {\n      if (hidden.includes(node.path))\n        return\n      const graphId = \"topic_\" + node.path\n      const group = this.getGroupTag(view, node)\n      nodes.push({id: graphId, label: node.path, shape: \"ellipse\", group: group})\n    });\n\n    const graph = {\n      nodes: nodes,\n      edges: edges\n    };\n\n    return graph\n  }\n\n  render() {\n    const graph = this.createGraph(this.props.rosGraph, this.props.view)\n    const events = {\n      click: (event) =>  {\n        if (event.nodes.length > 0) {\n          const index: number = event.nodes[0].indexOf('/')\n          let path: string = event.nodes[0]\n          let type: RosGraph.PrimitiveType = \"node\"\n          if (index > 0) {\n            path = event.nodes[0].slice(index)\n            type = event.nodes[0].slice(0, index - 1)\n          }\n          const node: SimpleNode = {\n            path: path,\n            name: path,\n            type: type,\n          }\n          this.props.setNodeActive(node, true)\n        }\n      }\n    }\n    return (\n    <div className=\"NodeGraph\">\n      <div style={{ flex: '1 1 auto', height: 0}}>\n        <Graph graph={graph} options={this.state.options} style={{height: \"100%\"}} events={events} />\n      </div>\n      <div className=\"ButtonPanel\">\n        <span className='SmallButton ColorTwo' onClick={() =>\n          {\n            let lonely = this.state.lonely\n            lonely.highlight = !this.state.lonely.highlight\n            this.setState({lonely: lonely})\n          }\n        }>{this.state.lonely.highlight ? \"hide lonely\" : \"lonely\"}</span>\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default NodeGraph;\n","export default {\n  tree: {\n    base: {\n      listStyle: 'none',\n      margin: 0,\n      padding: 0,\n      fontSize: '16px',\n      overflowY: 'auto',\n    },\n    node: {\n      base: {\n        position: 'relative',\n        paddingLeft: 15,\n      },\n      link: {\n        cursor: 'pointer',\n        position: 'relative',\n        padding: '0px 5px',\n        display: 'block'\n      },\n      activeLink: {\n        background: '#31363F',\n        color: 'rgba(122, 192, 210, 0.86)'\n      },\n      toggle: {\n        base: {\n          position: 'relative',\n          display: 'inline-block',\n          verticalAlign: 'top',\n          marginLeft: '-15px',\n          height: '20px',\n          width: '15px'\n        },\n        wrapper: {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          margin: '-7px 0 0 -7px',\n          height: '10px'\n        },\n        height: 10,\n        width: 10,\n        arrow: {\n          fill: '#9DA5AB',\n          strokeWidth: 0\n        }\n      },\n      header: {\n        base: {\n          display: 'inline-block',\n          verticalAlign: 'top',\n          // color: '#9DA5AB'\n        },\n        connector: {\n          width: '2px',\n          height: '14px',\n          borderLeft: 'solid 2px black',\n          borderBottom: 'solid 2px black',\n          position: 'absolute',\n          top: '0px',\n          left: '-21px'\n        },\n        title: {\n          lineHeight: '22px',\n          verticalAlign: 'middle'\n        }\n      },\n      subtree: {\n        listStyle: 'none',\n        paddingLeft: '0px'\n      },\n      loading: {\n        color: '#E2C089'\n      }\n    }\n  }\n};\n","// @flow\nimport _ from 'lodash';\nimport React from 'react';\n\nimport RosGraphView from './RosGraphView';\nimport * as RosGraph from './RosGraph';\n\n\ntype NodeTreeObj = {\n  active: boolean,\n  children?: Array<NodeTreeObj>,\n  decorators?: ?Object,\n  name: string,\n  path: string,\n  toggled?: boolean,\n  type: RosGraph.PrimitiveType,\n}\n\ntype NodeTreeArr = Array<NodeTreeObj>\ntype NodeTree = NodeTreeObj | NodeTreeArr\n\nfunction addDecorator(path: string, relations: ?RosGraph.Relations): ?Object {\n  let className = null;\n\n  if (relations) {\n    if (relations.in.includes(path)) className = \"NodeInput\"\n    if (relations.out.includes(path)) className = \"NodeOutput\"\n  }\n\n  if (className) {\n    return {\n      Header: props => (\n        <div className={className} style={props.style.base}>\n          <div style={props.style.title}>{props.node.name}</div>\n        </div>\n      )\n    };\n  }\n}\n\n/**\n * Insert a new node at a location in the tree (recursive)\n * @private\n * @param {object} data - The tree in which to add the node\n * @param {array} path - The full path\n * @param {number} pathIndex - Tracks the recursive level down the path\n * @param {array} toggled - A list of all toggled tree nodes\n */\nfunction insert(data: NodeTreeArr = [], path: Array<string>, pathIndex: number, view: RosGraphView, type: RosGraph.PrimitiveType) {\n  const name: string = '/' + path[pathIndex]\n  const subpath: string = path.slice(0, pathIndex + 1).join('/')\n  const active: boolean = view.active ? view.type === type && view.active.path === subpath : false\n\n    // Add node and stop recursion if root node\n  if (pathIndex === path.length - 1) {\n    const decorator = active ? undefined : addDecorator(subpath, view.relations)\n    const leaf: NodeTreeObj = {\n      active: active,\n      decorators: decorator,\n      name: name,\n      path: subpath,\n      type: type,\n    }\n    data.push(leaf);\n    return data;\n  }\n\n  // Not a root node so need to check it should be toggled\n  var index: number = _.findIndex(data, (o) => o.path === subpath)\n  var stem: ?NodeTreeObj = null\n  if (index === -1) {\n    const decorator = active ? undefined : addDecorator(subpath, view.relations)\n    stem = {\n      active: active,\n      children: [],\n      decorators: decorator,\n      name: name,\n      path: subpath,\n      toggled: !!view.toggled[type] && view.toggled[type].includes(subpath),\n      type: type,\n    }\n    data.push(stem)\n  } else {\n    stem = data[index]\n    stem.children = stem.children || []\n    stem.toggled = !!view.toggled[type] && view.toggled[type].includes(subpath)\n  }\n\n  return insert(stem.children, path, ++pathIndex, view, type);\n}\n\n/**\n * Create a new tree from a list of nodes\n * @param {string} nodes - The list of nodes\n * @param {array} view.toggled - The list of nodes that are toggled (expanded)\n * @param {array} view.relations.in - The list of nodes that are inputs (expanded)\n * @param {array} view.relations.out - The list of nodes that are outputs (expanded)\n * @return {object} A new full tree\n */\nfunction GetNodeTree(nodes: Array<{path: string}> = [], view: RosGraphView = new RosGraphView(), type: RosGraph.PrimitiveType): NodeTree {\n\n  var data: NodeTreeArr = [];\n  nodes.forEach((node) => {\n    if (!view.getHidden().includes(node.path) && (view.search ? node.path.includes(view.search) : true)) {\n      const path = node.path.split(\"/\")\n      insert(data, path, 1, view, type);\n    }\n  });\n  return data;\n}\n\nexport {GetNodeTree}\nexport type {NodeTree}\nexport default GetNodeTree;\n","// @flow\nimport * as React from 'react';\nimport {Treebeard} from 'react-treebeard';\nimport styles from './styles/treebeard-theme';\n\nimport * as NodeTree from './lib/NodeTree';\nimport * as RosGraph from './lib/RosGraph'\nimport RosGraphView from './lib/RosGraphView';\nimport Widget from './Widget';\n\nimport type {SimpleNode} from './lib/RosGraphView';\n\ntype Props<A> = {\n  name: string,\n  nodes: Array<A>,\n  setNodeActive: (treeNode: SimpleNode, toggled: boolean) => void,\n  type: RosGraph.PrimitiveType,\n  view: RosGraphView,\n}\n\n/**\n * Draws a list of nodes and gives options for interaction\n * @extends react.Component\n */\nclass NodeList extends React.Component<Props<*>> {\n\n  render() {\n    const tree = NodeTree.GetNodeTree(this.props.nodes, this.props.view, this.props.type)\n    return (\n    <Widget name={this.props.name}>\n        <Treebeard\n          data={tree}\n          onToggle={this.props.setNodeActive}\n          style={styles}\n         />\n    </Widget>\n    );\n  }\n}\n\nexport default NodeList;\n","// @flow\nimport * as React from 'react';\nimport ROSLIB from 'roslib';\n\nimport ButtonPanel from './ButtonPanel';\nimport NodeGraph from './NodeGraph';\nimport NodeList from './NodeList';\nimport * as RosGraph from './lib/RosGraph';\nimport RosGraphView from './lib/RosGraphView';\n\nimport \"../node_modules/react-grid-layout/css/styles.css\";\nimport \"../node_modules/react-resizable/css/styles.css\";\nimport './styles/JViz.css';\n\ntype TreeNode = {\n  name: string,\n  path: string,\n  type: RosGraph.PrimitiveType,\n}\n\ntype Props = {\n  ros: ROSLIB.Ros,\n}\n\ntype WidgetType = {\n  element: React.Element<any>,\n  id: string,\n}\n\ntype State = {\n  autoExpand: boolean,\n  layouts: ?Object,\n  rosGraph: RosGraph.RosGraph,\n  view: RosGraphView,\n  widgets: Array<WidgetType>,\n}\n\nclass JViz extends React.Component<Props, State> {\n    state = {\n      autoExpand: true,\n      layouts: {},\n      rosGraph: new RosGraph.RosGraph(),\n      view: new RosGraphView(),\n      widgets: [],\n    }\n\n    constructor(props: Props) {\n        super(props);\n        this.updateRosGraph()\n    }\n\n    updateRosGraph = () => {\n      RosGraph.GetRosGraph(this.props.ros)\n        .then(result => this.setState({\n          rosGraph: result,\n        }))\n    }\n\n    /**\n     * @param treeNode.name {string} Node's label\n     * @param treeNode.path {string} Node's unique identifier\n     * @param treeNode.type {string} \"node\" or \"topic\" (TODO: move to enum)\n     * @param toggled {boolean} True if the node should be expanded\n     */\n    setNodeActive = (treeNode: TreeNode, toggled: boolean = true) => {\n      this.setState({\n        view: this.state.view.setNodeActive(treeNode, toggled, this.state.rosGraph)\n      })\n    }\n\n    /**\n     * @param id {string} Unique identifier of the new widget\n     * @param element {React.Node} The react component to add to the window\n     * @param name {string} The label to give the widget\n     */\n    addWidget = (id: string, element: React.Element<any>) => {\n      console.log(\"Adding: \", id, element)\n\n      this.setState(prevState => ({\n        widgets: [...prevState.widgets, {\n          id: id,\n          element: element\n        }],\n      }));\n    }\n\n  removeWidget = (id: string) => {\n    console.log(\"Removing: \", id)\n\n    const widgets = this.state.widgets.filter((item)=>{\n      return item.id !== id;\n    });\n\n    this.setState({\n      widgets: widgets,\n    })\n  }\n\n  handleSearch = (event: {target: {value: string}}) => {\n    this.setState({\n      view: this.state.view.searchFor(event.target.value),\n    })\n  }\n\n  handleSearchKey = (event: {keyCode: string}) => {\n    // if (event.keyCode === 27) {\n    //   this.setState({\n    //     view: this.state.view.searchFor(\"\"),\n    //   })\n    // }\n  }\n\n  hideItem = (path: string, type: string) => {\n    this.setState({view: this.state.view.hideItem(path, type)})\n  }\n\n\n  render() {\n    return (\n      <div className=\"JViz\">\n        <div className=\"Sidebar\">\n          <div style={{padding: 5, display: \"flex\"}}><input type=\"text\" className=\"InputTextBox\" onChange={this.handleSearch} onKeyDown={this.handleSearchKey} placeholder=\"Search...\" value={this.state.view.search}/></div>\n          <NodeList name=\"Node List\" nodes={this.state.rosGraph.nodes} view={this.state.view} setNodeActive={this.setNodeActive} type=\"node\"/>\n          <NodeList name=\"Topic List\" nodes={this.state.rosGraph.topics} view={this.state.view} setNodeActive={this.setNodeActive} type=\"topic\"/>\n          {this.state.view.active ? <ButtonPanel ros={this.props.ros} addWidget={this.addWidget} removeWidget={this.removeWidget} hideItem={this.hideItem} node={this.state.view.active} /> : false}\n        </div>\n        <div className=\"JViz-main\">\n          <NodeGraph key={\"node_graph\"} rosGraph={this.state.rosGraph} view={this.state.view} setNodeActive={this.setNodeActive}/>\n          <div className=\"ButtonPanel\">\n            <div data-tip=\"Refresh the entire ros graph\" className=\"SmallButton ColorOne\" onClick={this.updateRosGraph}>\n                Refresh\n            </div>\n            <div className=\"SmallButton ColorTwo\" onClick={() => {\n                this.setState({\n                    view: this.state.view.toggleDebug(),\n                  })\n              }}>\n              {this.state.view.hideDebug ? \"Show Debug\" : \"Hide Debug\"}\n            </div>\n            <div className=\"SmallButton ColorOne\" onClick={() => {\n                this.setState({\n                    view: this.state.view.unhideItems(),\n                  })\n              }}>\n              Unhide\n            </div>\n          </div>\n        </div>\n        {this.state.widgets.length ? <div className=\"Sidebar\">{this.state.widgets.map(widget => widget.element)}</div> : false}\n      </div>\n    );\n  }\n}\n\nexport default JViz;\n","// @flow\nimport * as React from 'react';\nimport ROSLIB from 'roslib';\n\nimport logo from './logo.svg';\nimport JViz from './JViz'\nimport './styles/App.css';\nimport {version} from '../package.json';\n\ntype Props = {\n\n}\n\ntype State = {\n  connected: boolean,\n  error: ?React.Element<*>,\n  url: string,\n}\n\nclass App extends React.Component<Props, State> {\n  state = {\n    connected: false,\n    error: undefined,\n    url: \"ws://localhost:9090\",\n  }\n\n  ros = null\n\n  handleChange = (event: {target: {value: string}}) => {\n    this.setState({url: event.target.value});\n  }\n\n  handleConnect = () => {\n    try {\n      this.ros = new ROSLIB.Ros({\n          url : this.state.url,\n        });\n\n      if (this.ros) this.ros.on('connection', () => {\n        this.setState({\n            connected: true,\n        });\n      });\n\n      if (this.ros) this.ros.on('error', (error) => {\n        console.log(error)\n        this.setState({\n          error: (\n            <div style={{color: \"rgb(161, 55, 55)\", margin: 5}}>\n              <div>Unable to establish connection to rosbridge server</div>\n            </div>\n          ),\n        });\n      });\n    } catch (e) {\n      console.log(\"Failed to create ros instance\", e)\n      this.setState({\n        error: (\n          <div style={{color: \"rgb(161, 55, 55)\", margin: 5}}>\n            <div>{e.message}</div>\n          </div>\n        ),\n      });\n    }\n  }\n\n  render() {\n    var x = \"\";\n    if (this.state.connected) {\n        x = (\n            <div className=\"App\">\n              <JViz ros={this.ros} />\n            </div>\n        );\n    } else {\n        x = (\n            <div className=\"App\">\n                <div className=\"AppHeader\">\n                  <img src={logo} className=\"Logo\" alt=\"logo\" />\n                  <h2>Welcome to JViz</h2>\n                </div>\n                <div className=\"AppMain\">\n                  <p>Connect to url</p>\n                  <input type=\"url\" name=\"url\" value={this.state.url} onChange={this.handleChange}/>\n                  <button onClick={this.handleConnect} value=\"Connect\">\n                    Connect\n                  </button>\n                  {this.state.error}\n                </div>\n                <div className=\"AppFooter\">\n                  <div style={{float: \"right\"}}>JViz Version: {version}</div>\n                </div>\n            </div>\n\n        );\n    }\n\n    return x;\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}